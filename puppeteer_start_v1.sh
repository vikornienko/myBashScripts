#!/bin/bash
# Puppeteer with CommonJS.
# Author: Valeriy Kornienko vikornienko76@gmail.com
# Step 1: asks user for the project name
echo "This script will help you initialize the project using the library puppeteer nodejs"

echo "Enter the project name: " 
read -r project_name

echo "Enter directory for project: "
read -r directory_name

echo "Enter author name: "
read -r author_name

echo "Enter description: "
read -r description

# Step 2: navigete to projects directoty and create directory (if not exist) and project folder
if ! [ -d ./"$directory_name" ] 
then
echo "Directory $directory_name does not exist but will be created."
mkdir "$directory_name"
fi
cd ./"$directory_name" || exit
# Step 2: Create a package.json file. Add the project name to it.
cat <<EOF >package.json
{
  "name": "$project_name",
  "version": "1.0.0",
  "description": "$description",
  "main": "index.js",
  "scripts": {
    "start": "node src/index.js",
    "start:debug": "nodemon --inspect index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "node.js",
    "telegraf.js"
  ],
  "author": "$author_name",
  "license": "MIT",
  "dependencies": {
    "dotenv": "",
    "puppeteer": "",
    "winston": ""
  },
  "devDependencies": {
    "jsdoc": "",
    "eslint": ""
  }  
}
EOF
# Step 3: Create a README.md file. Add the project name to it.
cat <<EOF >README.md
# $project_name

A repository for self-study on writing puppeteer scraping on node.js.

$description
To create the project in this repository, the following were used:
- puppeteer node.js library;
- dotenv library for storing variables in the .env file.

EOF

# Step 4: Create the .gitignore file.
cat <<EOF >.gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
EOF

# Step 5: Create the source directory.
mkdir src 

# Step 9: Install dependencies from package.json file.
npm i